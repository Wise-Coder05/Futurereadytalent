package time;
import java.util.Set;
import appliance.core.Appliance;
import java.util.ArrayList;
import policy.core.PolicyComponent;

/**Handles all TimedEvents attached to a house, checking and execute each of them
 * as necessary, removing them when they have finished.
 *
 * @author Darius Hodaei <k1183257@kcl.ac.uk>
 */
public interface ITimedEventHandler {

    /**Called to prompt the TimedEventHandler to check its TimedEvents
     * to see which are ready to execute, or have finished and should be
     * removed
     */
    void coordinatedExecution();

    /**Used to submit HouseTimedEvents for the TimedEventHandler
     * to manage and execute when necessary
     *
     * @param timedEvents the HouseTimedEvents to manage
     */
    void submitGeneralHouseEvents(Set<HouseTimedEvent> timedEvents);

   /**Used to submit ApplianceTimedEvents for the TimedEventHandler
     * to manage and execute when necessary
     *
     * @param timedEvents the ApplianceTimedEvents to manage
     */
    void submitGeneralApplianceEvents(Set<ApplianceTimedEvent> timedEvents);

    /**When an appliance is added to a house it should call this method so that
     * all currently attached PolicyComponents can be checked to see if they
     * have rules that may affect the class of this appliance, and if so, those
     * TimedEvents are created and managed thereafter
     *
     * @param a the Appliance to check PolicyComponents for
     */
    void addApplianceApplicablePolicyEvents(Appliance a);

    /**When an appliance is removed from a house it should call this method so that
     * all currently attached PolicyComponents can be checked to see if they
     * have rules that may affect this appliance, and if so, those
     * TimedEvents are removed
     *
     * @param a the Appliance to check PolicyComponents for
     */
    void removeApplianceApplicablePolicyEvents(Appliance a);

    /**All currently managed ApplianceTimedEvents with a registered appliance
     * that matches the given appliance are removed
     *
     * @param appliance the Appliance to remove TimedEvents for
     */
    void removeGeneralApplianceEvents(Appliance appliance);

    /**The TimedEventHandler will load and manage all the TimedEvents
     * associated with the given PolicyComponent
     *
     * @param pc the PolicyComponent to load and manage rules for
     */
    void submitPolicyEvents(PolicyComponent pc);

    /**Returns all TimedEvents that were created by the given PolicyComponent
     *
     * @param pc the PolicyComponent to seek current TimedEvents for
     * @return all current TimedEvents that were create by the given PolicyComponent
     */
    public ArrayList<TimedEvent> getCurrentPolicyTimedEvents(PolicyComponent pc);

    /**Removes the TimedEvents from the TimedEventHandler, along with the
     * PolicyComponent tag with which they are associated
     *
     * @param timedEvents the TimedEvents to remove
     */
    void removePolicyEvents(Set<TimedEvent> timedEvents);

    /**Submits the Balance Load requests generated by an Aggregator to be
     * managed thereafter by the TimedEventHandler
     *
     * @param timedEvents the Balance Load requests to manage
     */
    void submitBalanceLoadEvents(Set<ApplianceTimedEvent> timedEvents);
}
